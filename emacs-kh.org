#+TITLE:       The Emacs Configuration of Kelvin Hu
#+AUTHOR:      Kelvin Hu
#+EMAIL:       ini.kelvin@gmail.com
#+DATE:        2015-01-24 Sat
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t


Now it's time to configure Emacs through org-mode, I should catch up the
fashion, shouldn't I? :-p

* General Configuration

  1. disable loading vc plugins, it will obviously slow down emacs booting:

     #+BEGIN_SRC emacs-lisp
     (setq vc-handled-backends nil)
     #+END_SRC

  2. start the server:

     #+BEGIN_SRC emacs-lisp
     (require 'server)
     ;; fix directory unsafe error
     (when (and (>= emacs-major-version 23)
                (equal window-system 'w32))
       (defun server-ensure-safe-dir (dir) "Noop" t))
     (unless (server-running-p)
       (server-start))
     #+END_SRC

  3. extend the loading path:

     #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/conf")
     (add-to-list 'load-path "~/.emacs.d/util")
     #+END_SRC

* Sub Packages

  1. setup the proxy server if it is an office machine, as all traffic without
     proxy will be blocked, so emacs package update will always fail

     #+BEGIN_SRC emacs-lisp
     (require 'util-common)
     (if is-os-windows
         (setq url-proxy-services '(("http" . "web-proxy.oa.com:8080"))))
     #+END_SRC

  2. make sure the package dependency verification module is loaded at the
     first step

      #+BEGIN_SRC emacs-lisp
      (require 'conf-package)
      #+END_SRC

  3. other modules

     #+BEGIN_SRC emacs-lisp
     (require 'conf-theme)
     (require 'conf-misc)
     (require 'conf-ido)
     (require 'conf-smex)
     (require 'conf-editing)
     (require 'conf-programming)
     (require 'conf-auto-complete)
     (require 'conf-markdown)
     (require 'conf-ace-jump)
     (require 'conf-smartparens)
     (require 'conf-org)
     (require 'conf-org-page)
     (require 'conf-ibuffer)
     (require 'conf-yasnippet)
     (require 'conf-flyspell)
     (require 'conf-encoding)
     (require 'conf-undo-tree)
     (require 'conf-highlight-symbol)
     #+END_SRC

  4. read the desktop configuration at the last step

     #+BEGIN_SRC emacs-lisp
     (require 'conf-desktop)
     #+END_SRC

* TODO also use org-mode to configure other sub modules

* recentf

  #+BEGIN_SRC emacs-lisp
    (require 'recentf)
    (recentf-mode 1)
    (setq recentf-max-saved-items 200
          recentf-max-menu-items 15)
  #+END_SRC

* helm

  TODO: improve the following code block

  #+BEGIN_SRC emacs-lisp
    (require 'helm)
    (require 'helm-config)

    (global-set-key (kbd "C-c h") 'helm-command-prefix)
    (global-set-key (kbd "M-x") 'helm-M-x)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (global-unset-key (kbd "C-x c"))

    (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to do persistent action
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
    (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

    (global-set-key (kbd "C-x f") 'helm-recentf)
    (global-set-key (kbd "M-y") 'helm-show-kill-ring)
    (global-set-key (kbd "C-c i") 'helm-imenu)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (global-set-key (kbd "C-x b") 'helm-mini)
    (global-set-key (kbd "C-c h o") 'helm-occur)
    (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
    (global-set-key (kbd "C-c h x") 'helm-register)
    (global-set-key (kbd "C-c h g") 'helm-google-suggest)

    (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
          helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
          helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
          helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
          helm-ff-file-name-history-use-recentf t)

    (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
    (setq helm-recentf-fuzzy-match t)
    (setq helm-buffers-fuzzy-matching t)

    (helm-mode 1)
  #+END_SRC

* neotree

  #+BEGIN_SRC emacs-lisp
    (require 'neotree)
    ;; the following hook is to solve key conflict with evil-mode
    (add-hook 'neotree-mode-hook
              (lambda ()
                (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
                (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-enter)
                (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
                (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)))
  #+END_SRC
